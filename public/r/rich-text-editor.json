{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rich-text-editor",
  "type": "registry:component",
  "title": "Rich Text Editor",
  "author": "Arnau GÃ³mez (www.arnaugomez.com)",
  "description": "A classic WYSIWYG rich text editor built with Tiptap",
  "dependencies": [
    "@tiptap/extension-highlight",
    "@tiptap/extension-link",
    "@tiptap/extension-placeholder",
    "@tiptap/extension-subscript",
    "@tiptap/extension-superscript",
    "@tiptap/extension-text-align",
    "@tiptap/extension-underline",
    "@tiptap/react",
    "@tiptap/starter-kit",
    "lucide-react"
  ],
  "devDependencies": [
    "@tailwindcss/typography"
  ],
  "registryDependencies": [
    "toggle-group"
  ],
  "files": [
    {
      "path": "registry/new-york/rich-text-editor/rich-text-editor.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport Underline from \"@tiptap/extension-underline\";\nimport Highlight from \"@tiptap/extension-highlight\";\nimport TextAlign from \"@tiptap/extension-text-align\";\nimport Superscript from \"@tiptap/extension-superscript\";\nimport SubScript from \"@tiptap/extension-subscript\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport {\n  Bold,\n  Strikethrough,\n  Italic,\n  Underline as UnderlineIcon,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n  Link as LinkIcon,\n  Quote,\n  List,\n  ListOrdered,\n  RemoveFormattingIcon,\n  Unlink,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  AlignJustify,\n  Code,\n  Highlighter,\n  Subscript,\n  Superscript as SuperscriptIcon,\n  Minus,\n  Undo,\n  Redo,\n} from \"lucide-react\";\nimport Link from \"@tiptap/extension-link\";\nimport { cn } from \"@/lib/utils\";\nimport Placeholder from \"@tiptap/extension-placeholder\";\nimport \"./rich-text-editor.css\";\n\ninterface RichTextEditorProps {\n  value?: string;\n  placeholder?: string;\n  onChange?: (content: string) => void;\n  className?: string;\n}\n\nexport function RichTextEditor({\n  value = \"\",\n  onChange,\n  placeholder = \"\",\n  className,\n}: RichTextEditorProps) {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [\n      StarterKit.configure({\n        heading: {\n          levels: [1, 2, 3, 4],\n        },\n      }),\n      Underline,\n      Highlight,\n      Link,\n      TextAlign.configure({\n        types: [\"heading\", \"paragraph\"],\n        alignments: [\"left\", \"center\", \"right\", \"justify\"],\n      }),\n      Superscript,\n      SubScript,\n      Placeholder.configure({ placeholder }),\n    ],\n    content: value,\n    onUpdate: ({ editor }) => {\n      onChange?.(editor.getHTML());\n    },\n    editorProps: {\n      attributes: {\n        class: cn(\n          \"block border-input focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          \"prose prose-sm sm:prose-base max-w-full\"\n        ),\n      },\n    },\n  });\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"flex flex-wrap items-center gap-2 mb-3\">\n        <ToggleGroup type=\"multiple\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"bold\"\n            aria-label=\"Toggle bold\"\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            disabled={!editor.can().chain().focus().toggleBold().run()}\n            data-state={editor.isActive(\"bold\") ? \"on\" : \"off\"}\n          >\n            <Bold className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"strike\"\n            aria-label=\"Toggle strikethrough\"\n            onClick={() => editor.chain().focus().toggleStrike().run()}\n            disabled={!editor.can().chain().focus().toggleStrike().run()}\n            data-state={editor.isActive(\"strike\") ? \"on\" : \"off\"}\n          >\n            <Strikethrough className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"italic\"\n            aria-label=\"Toggle italic\"\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            disabled={!editor.can().chain().focus().toggleItalic().run()}\n            data-state={editor.isActive(\"italic\") ? \"on\" : \"off\"}\n          >\n            <Italic className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"underline\"\n            aria-label=\"Toggle underline\"\n            onClick={() => editor.chain().focus().toggleUnderline().run()}\n            disabled={!editor.can().chain().focus().toggleUnderline().run()}\n            data-state={editor.isActive(\"underline\") ? \"on\" : \"off\"}\n          >\n            <UnderlineIcon className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"code\"\n            aria-label=\"Toggle code\"\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            disabled={!editor.can().chain().focus().toggleCode().run()}\n            data-state={editor.isActive(\"code\") ? \"on\" : \"off\"}\n          >\n            <Code className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"highlight\"\n            aria-label=\"Toggle highlight\"\n            onClick={() => editor.chain().focus().toggleHighlight().run()}\n            disabled={!editor.can().chain().focus().toggleHighlight().run()}\n            data-state={editor.isActive(\"highlight\") ? \"on\" : \"off\"}\n          >\n            <Highlighter className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"clear\"\n            aria-label=\"Clear formatting\"\n            onClick={() =>\n              editor.chain().focus().clearNodes().unsetAllMarks().run()\n            }\n            disabled={\n              !editor.can().chain().focus().clearNodes().unsetAllMarks().run()\n            }\n            data-state=\"off\"\n          >\n            <RemoveFormattingIcon className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <ToggleGroup type=\"single\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"h1\"\n            aria-label=\"Heading 1\"\n            onClick={() =>\n              editor.chain().focus().toggleHeading({ level: 1 }).run()\n            }\n            disabled={\n              !editor.can().chain().focus().toggleHeading({ level: 1 }).run()\n            }\n            data-state={editor.isActive(\"heading\", { level: 1 }) ? \"on\" : \"off\"}\n          >\n            <Heading1 className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"h2\"\n            aria-label=\"Heading 2\"\n            onClick={() =>\n              editor.chain().focus().toggleHeading({ level: 2 }).run()\n            }\n            disabled={\n              !editor.can().chain().focus().toggleHeading({ level: 2 }).run()\n            }\n            data-state={editor.isActive(\"heading\", { level: 2 }) ? \"on\" : \"off\"}\n          >\n            <Heading2 className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"h3\"\n            aria-label=\"Heading 3\"\n            onClick={() =>\n              editor.chain().focus().toggleHeading({ level: 3 }).run()\n            }\n            disabled={\n              !editor.can().chain().focus().toggleHeading({ level: 3 }).run()\n            }\n            data-state={editor.isActive(\"heading\", { level: 3 }) ? \"on\" : \"off\"}\n          >\n            <Heading3 className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"h4\"\n            aria-label=\"Heading 4\"\n            onClick={() =>\n              editor.chain().focus().toggleHeading({ level: 4 }).run()\n            }\n            disabled={\n              !editor.can().chain().focus().toggleHeading({ level: 4 }).run()\n            }\n            data-state={editor.isActive(\"heading\", { level: 4 }) ? \"on\" : \"off\"}\n          >\n            <Heading4 className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <ToggleGroup type=\"multiple\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"blockquote\"\n            aria-label=\"Toggle blockquote\"\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            disabled={!editor.can().chain().focus().toggleBlockquote().run()}\n            data-state={editor.isActive(\"blockquote\") ? \"on\" : \"off\"}\n          >\n            <Quote className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"bulletList\"\n            aria-label=\"Toggle bullet list\"\n            onClick={() => editor.chain().focus().toggleBulletList().run()}\n            disabled={!editor.can().chain().focus().toggleBulletList().run()}\n            data-state={editor.isActive(\"bulletList\") ? \"on\" : \"off\"}\n          >\n            <List className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"orderedList\"\n            aria-label=\"Toggle ordered list\"\n            onClick={() => editor.chain().focus().toggleOrderedList().run()}\n            disabled={!editor.can().chain().focus().toggleOrderedList().run()}\n            data-state={editor.isActive(\"orderedList\") ? \"on\" : \"off\"}\n          >\n            <ListOrdered className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"horizontalRule\"\n            aria-label=\"Add horizontal rule\"\n            onClick={() => editor.chain().focus().setHorizontalRule().run()}\n            disabled={!editor.can().chain().focus().setHorizontalRule().run()}\n            data-state=\"off\"\n          >\n            <Minus className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"superscript\"\n            aria-label=\"Toggle superscript\"\n            onClick={() => editor.chain().focus().toggleSuperscript().run()}\n            disabled={!editor.can().chain().focus().toggleSuperscript().run()}\n            data-state={editor.isActive(\"superscript\") ? \"on\" : \"off\"}\n          >\n            <SuperscriptIcon className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"subscript\"\n            aria-label=\"Toggle subscript\"\n            onClick={() => editor.chain().focus().toggleSubscript().run()}\n            disabled={!editor.can().chain().focus().toggleSubscript().run()}\n            data-state={editor.isActive(\"subscript\") ? \"on\" : \"off\"}\n          >\n            <Subscript className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <ToggleGroup type=\"single\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"link\"\n            aria-label=\"Add link\"\n            onClick={() => {\n              const url = window.prompt(\"Enter URL\");\n              if (url) {\n                editor\n                  .chain()\n                  .focus()\n                  .setLink({\n                    href: url,\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                  })\n                  .run();\n              }\n            }}\n            disabled={\n              !editor\n                .can()\n                .chain()\n                .focus()\n                .setLink({ href: \"https://example.com\" })\n                .run()\n            }\n            data-state={editor.isActive(\"link\") ? \"on\" : \"off\"}\n          >\n            <LinkIcon className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"link\"\n            aria-label=\"Add link\"\n            onClick={() => {\n              editor.chain().focus().unsetLink().run();\n            }}\n            disabled={!editor.can().chain().focus().unsetLink().run()}\n          >\n            <Unlink className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <ToggleGroup type=\"single\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"left\"\n            aria-label=\"Align left\"\n            onClick={() => editor.chain().focus().setTextAlign(\"left\").run()}\n            disabled={!editor.can().chain().focus().setTextAlign(\"left\").run()}\n            data-state={editor.isActive({ textAlign: \"left\" }) ? \"on\" : \"off\"}\n          >\n            <AlignLeft className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"center\"\n            aria-label=\"Align center\"\n            onClick={() => editor.chain().focus().setTextAlign(\"center\").run()}\n            disabled={\n              !editor.can().chain().focus().setTextAlign(\"center\").run()\n            }\n            data-state={editor.isActive({ textAlign: \"center\" }) ? \"on\" : \"off\"}\n          >\n            <AlignCenter className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"right\"\n            aria-label=\"Align right\"\n            onClick={() => editor.chain().focus().setTextAlign(\"right\").run()}\n            disabled={!editor.can().chain().focus().setTextAlign(\"right\").run()}\n            data-state={editor.isActive({ textAlign: \"right\" }) ? \"on\" : \"off\"}\n          >\n            <AlignRight className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"justify\"\n            aria-label=\"Align justify\"\n            onClick={() => editor.chain().focus().setTextAlign(\"justify\").run()}\n            disabled={\n              !editor.can().chain().focus().setTextAlign(\"justify\").run()\n            }\n            data-state={\n              editor.isActive({ textAlign: \"justify\" }) ? \"on\" : \"off\"\n            }\n          >\n            <AlignJustify className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <ToggleGroup type=\"single\" size=\"sm\" variant=\"outline\">\n          <ToggleGroupItem\n            value=\"undo\"\n            aria-label=\"Undo\"\n            onClick={() => editor.chain().focus().undo().run()}\n            disabled={!editor.can().chain().focus().undo().run()}\n          >\n            <Undo className=\"size-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem\n            value=\"redo\"\n            aria-label=\"Redo\"\n            onClick={() => editor.chain().focus().redo().run()}\n            disabled={!editor.can().chain().focus().redo().run()}\n          >\n            <Redo className=\"size-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n      </div>\n\n      <EditorContent editor={editor} />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/rich-text-editor/rich-text-editor.css",
      "content": "/* TipTap editor placeholder (at the top) */\n.tiptap .is-editor-empty:first-child::before {\n  content: attr(data-placeholder);\n  @apply pointer-events-none float-left;\n  height: 0;\n  color: var(--muted-foreground);\n}\n",
      "type": "registry:component"
    }
  ],
  "docs": "Install and import the @tailwindcss/typography plugin"
}